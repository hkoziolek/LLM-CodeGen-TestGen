        -:    0:Source:../ETFA-Tests2/MATRIX_FullTest.st
        -:    0:Graph:Res0.gcno
        -:    0:Data:Res0.gcda
        -:    0:Runs:1
        -:    1:FUNCTION BIT_OF_DWORD : BOOL
        -:    2:  VAR_INPUT
        -:    3:    IN : DWORD;
        -:    4:    N : INT;
        -:    5:  END_VAR
        -:    6:
       23:    7:  BIT_OF_DWORD := (SHR(in,N) AND 16#00000001) > 0;
        -:    8:  (* from OSCAT library; www.oscat.de  *)
        -:    9:END_FUNCTION
        -:   10:
       23:   11:FUNCTION SIGN_R : BOOL
        -:   12:  VAR_INPUT
       23:   13:    IN : REAL;
        -:   14:  END_VAR
       23:   15:
      23*:   16:  SIGN_R := in < 0.0;
    #####:   17:  (* from OSCAT library; www.oscat.de  *)
    #####:   18:END_FUNCTION
       23:   19:
    #####:   20:FUNCTION FLOOR : INT
    #####:   21:  VAR_INPUT
    #####:   22:    x : REAL;
        -:   23:  END_VAR
    #####:   24:
    #####:   25:  FLOOR := REAL_TO_INT(X);
    #####:   26:  IF INT_TO_REAL(FLOOR) > X THEN
    #####:   27:  	floor := floor - 1;
        -:   28:  END_IF;
    #####:   29:  (* from OSCAT library; www.oscat.de  *)
    #####:   30:END_FUNCTION
        -:   31:
    #####:   32:FUNCTION FLOOR2 : DINT
    #####:   33:  VAR_INPUT
    #####:   34:    x : REAL;
    #####:   35:  END_VAR
    #####:   36:
    #####:   37:  FLOOR2 := REAL_TO_DINT(X);
    #####:   38:  IF DINT_TO_REAL(FLOOR2) > X THEN
    #####:   39:  	FLOOR2 := FLOOR2 - DINT#1;
    #####:   40:  END_IF;
    #####:   41:  (* from OSCAT library; www.oscat.de  *)
    #####:   42:END_FUNCTION
        -:   43:
    #####:   44:FUNCTION MODR : REAL
    #####:   45:  VAR_INPUT
    #####:   46:    IN : REAL;
    #####:   47:    DIVI : REAL;
    #####:   48:  END_VAR
        -:   49:
    #####:   50:  IF divi = 0.0 THEN
    #####:   51:  	MODR := 0.0;
    #####:   52:  ELSE
    #####:   53:  	MODR := in - DINT_TO_REAL(FLOOR2(in / divi)) * divi;
    #####:   54:  END_IF;
        -:   55:  (* from OSCAT library; www.oscat.de  *)
    #####:   56:  (* FC FLOOR2 required *)
        -:   57:END_FUNCTION
        -:   58:
    #####:   59:FUNCTION REVERSE : BYTE
    #####:   60:  VAR_INPUT
        -:   61:    IN : BYTE;
    #####:   62:  END_VAR
    #####:   63:
    #####:   64:  reverse := SHL(in,7) OR SHR(in,7) OR (ROR(in,3) AND BYTE#2#01000100) OR (ROL(in,3) AND BYTE#2#00100010)
    #####:   65:  	OR (SHL(in,1) AND BYTE#2#00010000) OR (SHR(in,1) AND BYTE#2#00001000);
    #####:   66:
    #####:   67:
    #####:   68:  (* Fromm Oscat Library, www.oscat.de *)
        -:   69:END_FUNCTION
        -:   70:
        -:   71:FUNCTION REFLECT : DWORD
    #####:   72:  VAR_INPUT
    #####:   73:    DI : DWORD;
        -:   74:    L : INT;
        -:   75:  END_VAR
    #####:   76:  VAR
        -:   77:    i : INT;
    #####:   78:    _d : DWORD;
    #####:   79:  END_VAR
    #####:   80:
    #####:   81:  _d := DI;
    #####:   82:  FOR i := 1 TO L DO
    #####:   83:  	REFLECT := SHL(REFLECT, 1) OR BOOL_TO_DWORD((_d AND DWORD#2#0000_0001) > DWORD#0); (* D.0 *)
    #####:   84:  	_d := SHR(_d, 1);
        -:   85:  END_FOR;
    #####:   86:  REFLECT := REFLECT OR SHL(_d, L);
    #####:   87:
    #####:   88:
        -:   89:  (* Fromm Oscat Library, www.oscat.de *)
    #####:   90:END_FUNCTION
        -:   91:
    #####:   92:
    #####:   93:FUNCTION BIT_LOAD_B : BYTE
    #####:   94:  VAR_INPUT
    #####:   95:    IN : BYTE;
    #####:   96:    VAL : BOOL;
        -:   97:    POS : INT;
    #####:   98:  END_VAR
        -:   99:
       26:  100:  IF VAL THEN
      16*:  101:  	BIT_LOAD_B := in OR SHL(BYTE#1,pos);
        -:  102:  ELSE
       10:  103:  	BIT_LOAD_B := in AND (NOT SHL(BYTE#1,pos));
        -:  104:  END_IF;
        -:  105:
        -:  106:  (*From OSCAT Library, www.oscat.de*)
    #####:  107:END_FUNCTION
    #####:  108:
    #####:  109:FUNCTION _BYTE_TO_INT : INT
      26*:  110:  VAR_INPUT
       26:  111:    IN : BYTE;
       26:  112:  END_VAR
      26*:  113:
      38*:  114:  _BYTE_TO_INT := USINT_TO_INT(BYTE_TO_USINT(IN));
    #####:  115:
      26*:  116:  (*From OSCAT Library, www.oscat.de*)
      12*:  117:END_FUNCTION
    #####:  118:
        -:  119:FUNCTION T_PLC_MS : UDINT
        -:  120:  VAR
       12:  121:    tx : UDINT;
       12:  122:  END_VAR
        -:  123:  VAR_INPUT
       12:  124:    debug : BOOL;
       12:  125:  END_VAR
    #####:  126:  VAR
       12:  127:    N : INT := 0;
       12:  128:    offset : UDINT := 0;
        -:  129:    temp : DWORD := 1;
       12:  130:  END_VAR
    #####:  131:
    #####:  132:  tx := 0;
    #####:  133:  {extern unsigned long __tick;
    #####:  134:  extern unsigned long long common_ticktime__;
        -:  135:  unsigned long long ticktime_ms = (common_ticktime__)/1000000;
        -:  136:  UDINT plc_time = (UDINT)(ticktime_ms * (unsigned long long)__tick);
    #####:  137:  TX = plc_time}
    #####:  138:  T_PLC_MS := tx;
    #####:  139:  IF debug THEN
    #####:  140:  	T_PLC_MS := (DWORD_TO_UDINT(SHL(UDINT_TO_DWORD(T_PLC_MS),N) OR SHL(temp,N))-1) + OFFSET;
    #####:  141:  END_IF;
    #####:  142:  
    #####:  143:
    #####:  144:  IF debug THEN
    #####:  145:  	T_PLC_MS := (DWORD_TO_UDINT(SHL(UDINT_TO_DWORD(T_PLC_MS),N) OR SHL(temp,N))-1) + OFFSET;
    #####:  146:  END_IF;
    #####:  147:
    #####:  148:  (* Original Code:
        -:  149:  tx := TIME();
    #####:  150:  T_PLC_MS := TIME_TO_DWORD(Tx);
    #####:  151:  IF debug THEN
        -:  152:  	T_PLC_MS := (SHL(T_PLC_MS,N) OR SHL(DWORD#1,N)-1) + OFFSET;
        -:  153:  END_IF;
    #####:  154:  *)
    #####:  155:
        -:  156:  (* From OSCAT library, www.oscat.de
        -:  157:
        -:  158:  this is a temporary T_PLC_MS FB until OpenPLC gets it´s own time() functionality *)
    #####:  159:
        -:  160:  (* PLC_TIME and Global variables PLC_SCAN_CYCL and PLC_CYCL_TIME required *)
        -:  161:END_FUNCTION
    #####:  162:
        -:  163:
    #####:  164:FUNCTION T_PLC_US : UDINT
    #####:  165:  VAR
    #####:  166:    tx : UDINT;
        -:  167:  END_VAR
    #####:  168:  VAR_INPUT
        -:  169:    debug : BOOL;
        -:  170:  END_VAR
        -:  171:  VAR
        -:  172:    N : INT := 0;
    #####:  173:    offset : UDINT := 0;
        -:  174:    temp : DWORD := 1;
        -:  175:  END_VAR
        -:  176:
    #####:  177:  T_PLC_US := tx*1000;
    #####:  178:  IF debug THEN
    #####:  179:  	T_PLC_US := (DWORD_TO_UDINT(SHL(UDINT_TO_DWORD(T_PLC_US),N) OR SHL(temp,N))-1) + OFFSET;
    #####:  180:  END_IF;
    #####:  181:
    #####:  182:  (* Original Code:
    #####:  183:  tx := TIME();
        -:  184:  T_PLC_US := TIME_TO_DWORD(Tx)*1000;
    #####:  185:  IF debug THEN
    #####:  186:  	T_PLC_US := (SHL(T_PLC_US,N) OR SHL(DWORD#1,N)-1) + OFFSET;
    #####:  187:  END_IF;
    #####:  188:  *)
    #####:  189:
    #####:  190:  (* From OSCAT library, www.oscat.de
        -:  191:
        -:  192:  this is a temporary T_PLC_US FB until OpenPLC gets it´s own time() functionality *)
    #####:  193:
        -:  194:  (* PLC_TIME and Global variables PLC_SCAN_CYCL and PLC_CYCL_TIME required *)
        -:  195:END_FUNCTION
    #####:  196:
        -:  197:
    #####:  198:
    #####:  199:FUNCTION_BLOCK FT_DERIV
    #####:  200:  VAR_INPUT
        -:  201:    IN : REAL;
    #####:  202:    K : REAL := 1.0;
        -:  203:    RUN : BOOL := TRUE;
        -:  204:  END_VAR
        -:  205:  VAR_OUTPUT
    #####:  206:    OUT : REAL;
    #####:  207:  END_VAR
    #####:  208:  VAR
    #####:  209:    old : REAL;
    #####:  210:    tx : UDINT;
    #####:  211:    last : UDINT;
    #####:  212:    init : BOOL;
    #####:  213:    tc : REAL;
    #####:  214:  END_VAR
    #####:  215:
    #####:  216:  tx:= T_PLC_US(en:=true);
    #####:  217:  tc := UDINT_TO_REAL(tx - last);
    #####:  218:
        -:  219:  (* init on firsat startup *)
    #####:  220:  IF NOT init THEN
    #####:  221:  	init := TRUE;
    #####:  222:  	old := in;
    #####:  223:  ELSIF run AND tc > 0.0 THEN
    #####:  224:  	out := (in - old) / tc * 1000000.0 * K;
    #####:  225:  	old := in;
        -:  226:  ELSE
    #####:  227:  	out := 0.0;
    #####:  228:  END_IF;
        -:  229:
    #####:  230:  last := tx;
        -:  231:
    #####:  232:  (* From OSCAT Library, www.oscat.de *)
        -:  233:  (* T_PLC_US, required *)
    #####:  234:END_FUNCTION_BLOCK
    #####:  235:
        -:  236:
        -:  237:FUNCTION_BLOCK FT_PIWL
        -:  238:  VAR_INPUT
        -:  239:    IN : REAL;
        -:  240:    KP : REAL := 1.0;
        -:  241:    KI : REAL := 1.0;
    #####:  242:    LIM_L : REAL := -1.0E38;
    #####:  243:    LIM_H : REAL := 1.0E38;
    #####:  244:    RST : BOOL;
    #####:  245:  END_VAR
    #####:  246:  VAR_OUTPUT
    #####:  247:    Y : REAL;
    #####:  248:    LIM : BOOL;
    #####:  249:  END_VAR
    #####:  250:  VAR
    #####:  251:    init : BOOL;
    #####:  252:    tx : UDINT;
    #####:  253:    tc : REAL;
    #####:  254:    t_last : UDINT;
    #####:  255:    in_last : REAL;
    #####:  256:    i : REAL;
    #####:  257:    p : REAL;
    #####:  258:  END_VAR
    #####:  259:
    #####:  260:  IF NOT init OR RST THEN
    #####:  261:  	init := TRUE;
    #####:  262:  	in_last := in;
    #####:  263:  		t_last := T_PLC_US(en:=true);
    #####:  264:  	i := 0.0;
    #####:  265:  	tc := 0.0;
    #####:  266:  ELSE
    #####:  267:  	(* read last cycle time in Microseconds *)
    #####:  268:  		tx := T_PLC_US(en:=true);
    #####:  269:  	tc := UDINT_TO_REAL(tx - t_last);
    #####:  270:  	t_last := tx;
        -:  271:
        -:  272:  	(* calculate proportional part *)
    #####:  273:  	p := KP * IN;
        -:  274:
        -:  275:  	(* run integrator *)
    #####:  276:  	i := (IN + in_last) * 5.0E-7 * KI * tc + i;
    #####:  277:  	in_last := IN;
        -:  278:
        -:  279:  	(* calculate output Y *)
    #####:  280:  	Y := p + i;
        -:  281:
        -:  282:  	(* check output for limits *)
    #####:  283:  	IF Y >= LIM_H THEN
    #####:  284:  		Y := LIM_H;
    #####:  285:  		IF ki <> 0.0 THEN
    #####:  286:  			i := LIM_H - p;
        -:  287:  		ELSE
    #####:  288:  			i := 0.0;
        -:  289:  		END_IF;
    #####:  290:  		LIM := TRUE;
    #####:  291:  	ELSIF Y <= LIM_L THEN
    #####:  292:  		Y := LIM_L;
    #####:  293:  		IF ki <> 0.0 THEN
    #####:  294:  			i := LIM_L - p;
        -:  295:  		ELSE
    #####:  296:  			i := 0.0;
        -:  297:  		END_IF;
    #####:  298:  		LIM := TRUE;
        -:  299:  	ELSE
    #####:  300:  		LIM := FALSE;
        -:  301:  	END_IF;
        -:  302:  END_IF;
        -:  303:
    #####:  304:  (* From OSCAT Library, www.oscat.de *)
        -:  305:  (* T_PLC_US required *)
    #####:  306:END_FUNCTION_BLOCK
    #####:  307:
        -:  308:
        -:  309:FUNCTION_BLOCK INTEGRATE
        -:  310:  VAR_INPUT
        -:  311:    _E : BOOL := TRUE;
        -:  312:    X : REAL;
        -:  313:    K : REAL := 1.0;
    #####:  314:  END_VAR
    #####:  315:  VAR_IN_OUT
    #####:  316:    Y : REAL;
    #####:  317:  END_VAR
    #####:  318:  VAR
    #####:  319:    x_last : REAL;
    #####:  320:    init : BOOL;
    #####:  321:    last : UDINT;
    #####:  322:    tx : UDINT;
    #####:  323:  END_VAR
    #####:  324:
    #####:  325:  tx:= T_PLC_MS(en:=true);
        -:  326:
    #####:  327:  IF NOT init THEN
    #####:  328:  	init := TRUE;
    #####:  329:  	X_last := X;
    #####:  330:  ELSIF _E THEN
    #####:  331:  	Y := (X + X_LAST) * 0.5E-3 * UDINT_TO_REAL(tx-last) * K + Y;
    #####:  332:  	X_last := X;
        -:  333:  END_IF;
    #####:  334:  last := tx;
    #####:  335:
    #####:  336:  (* From OSCAT Library, www.oscat.de *)
        -:  337:  (* T_PLC_MS required *)
    #####:  338:END_FUNCTION_BLOCK
    #####:  339:
        -:  340:FUNCTION_BLOCK MATRIX
        -:  341:  VAR_INPUT
        -:  342:    X1 : BOOL;
        -:  343:    X2 : BOOL;
        -:  344:    X3 : BOOL;
        -:  345:    X4 : BOOL;
        4:  346:    X5 : BOOL;
       4*:  347:    RELEASE : BOOL;
       4*:  348:  END_VAR
       4*:  349:  VAR_OUTPUT
       4*:  350:    CODE : BYTE;
       4*:  351:    _TP : BOOL;
       4*:  352:    Y1 : BOOL := TRUE;
       4*:  353:    Y2 : BOOL;
       4*:  354:    Y3 : BOOL;
       4*:  355:    Y4 : BOOL;
       4*:  356:  END_VAR
       4*:  357:  VAR
       4*:  358:    line : BYTE;
       4*:  359:    x : ARRAY [0..3] OF BYTE;
       4*:  360:    l : ARRAY [0..3] OF BYTE;
       4*:  361:    i : INT;
        -:  362:    temp : BYTE;
        -:  363:    temp2 : BYTE;
        4:  364:    L_temp : BYTE;
        -:  365:    temp_bit : BOOL;
        -:  366:    in_temp : INT;
        -:  367:  END_VAR
        4:  368:
        4:  369:  _TP := FALSE;
       8*:  370:  code := BYTE#0;
       4*:  371:
       4*:  372:  (* read scan lines *)
       8*:  373:  in_temp := _BYTE_TO_INT(line);
       8*:  374:  temp := X[in_temp];  (* X[LINE] umkopieren *)
       4*:  375:
        4:  376:  temp:=BIT_LOAD_B(temp,X1,0); (* X[line].0 := X1; *)
        4:  377:  temp:=BIT_LOAD_B(temp,X2,1); (* X[line].1 := X2; *)
        4:  378:  temp:=BIT_LOAD_B(temp,X3,2); (* X[line].2 := X3; *)
        4:  379:  temp:=BIT_LOAD_B(temp,X4,3); (* X[line].3 := X4; *)
        4:  380:  temp:=BIT_LOAD_B(temp,X5,4); (* X[line].4 := X5; *)
        4:  381:
       4*:  382:  X[in_temp] := temp; (* X[LINE] zurückkopieren *)
    #####:  383:
        -:  384:  (* compare for change *)
        -:  385:  FOR i := 0 TO 3 DO
       15:  386:  	IF X[i] <> L[i] THEN
        8:  387:  		(* scan line information has changed code need to be found and generated *)
        3:  388:  		temp   := x[i] XOR L[i];
        3:  389:          temp2  := X[i];
        3:  390:          L_temp := L[i];
        -:  391:
        3:  392:          IF BIT_OF_DWORD(BYTE_TO_DWORD(temp),0) THEN (* temp.l *)
        2:  393:  			code := BYTE#1;
        2:  394:              temp_bit := BIT_OF_DWORD(BYTE_TO_DWORD(temp2),0);   (* X[i].l *)
        2:  395:              code := BIT_LOAD_B(code,temp_bit,7);     			(* code.X7 *)
        2:  396:              L_temp := BIT_LOAD_B(L_temp,temp_bit,0); 			(* L[i].l *)
        -:  397:  		ELSIF BIT_OF_DWORD(BYTE_TO_DWORD(temp),1) THEN          (* temp.X1 *)
        4:  398:  			code := BYTE#2;
        1:  399:              temp_bit := BIT_OF_DWORD(BYTE_TO_DWORD(temp2),1);   (* X[i].X1 *)
        1:  400:              code := BIT_LOAD_B(code,temp_bit,7);     			(* code.X7 *)
        1:  401:              L_temp := BIT_LOAD_B(L_temp,temp_bit,1); 			(* L[i].X1 *)
        1:  402:  		ELSIF BIT_OF_DWORD(BYTE_TO_DWORD(temp),2) THEN          (* temp.X2 *)
    #####:  403:  			code := BYTE#3;
    #####:  404:              temp_bit := BIT_OF_DWORD(BYTE_TO_DWORD(temp2),2);   (* X[i].X2 *)
    #####:  405:              code := BIT_LOAD_B(code,temp_bit,7);     			(* code.X7 *)
    #####:  406:              L_temp := BIT_LOAD_B(L_temp,temp_bit,2); 			(* L[i].X2 *)
    #####:  407:  		ELSIF BIT_OF_DWORD(BYTE_TO_DWORD(temp),3) THEN          (* temp.X3 *)
       1*:  408:  			code := BYTE#4;
    #####:  409:              temp_bit := BIT_OF_DWORD(BYTE_TO_DWORD(temp2),3);   (* X[i].X3 *)
    #####:  410:              code := BIT_LOAD_B(code,temp_bit,7);     			(* code.X7 *)
    #####:  411:              L_temp := BIT_LOAD_B(L_temp,temp_bit,3); 			(* L[i].X3 *)
    #####:  412:  		ELSIF BIT_OF_DWORD(BYTE_TO_DWORD(temp),4) THEN          (* temp.X4 *)
    #####:  413:  			code := BYTE#5;
    #####:  414:              temp_bit := BIT_OF_DWORD(BYTE_TO_DWORD(temp2),4);   (* X[i].X4 *)
    #####:  415:              code := BIT_LOAD_B(code,temp_bit,7);     			(* code.X7 *)
    #####:  416:              L_temp := BIT_LOAD_B(L_temp,temp_bit,4); 			(* L[i].X4 *)
    #####:  417:  		END_IF;
       3*:  418:          L[i] := L_temp;
        3:  419:  		_TP := TRUE;
       3*:  420:          code := (code AND BYTE#2#1000_1111) OR SHL(LINE AND BYTE#2#0000_0111,4);
        -:  421:          (* obere zeile enspricht: Code.X4 := Line.l; /  Code.X5 := Line.X1; / Code.RELEASE := Line.X2; *)
        -:  422:
    #####:  423:  		(* check if release codes need to be killed *)
        3:  424:  		IF NOT release AND code < BYTE#127 THEN
    #####:  425:  			code := BYTE#0;
    #####:  426:  			_TP := FALSE;
        -:  427:  		END_IF;
        3:  428:          EXIT;
        -:  429:  	END_IF;
        -:  430:  END_FOR;
        4:  431:
        -:  432:  (* increment scan line every cycle *)
        4:  433:  line := INT_TO_BYTE(_BYTE_TO_INT(line) + 1) AND BYTE#2#0000_0011;
        4:  434:  temp := SHL(BYTE#1,_BYTE_TO_INT(line));
        -:  435:
        4:  436:  Y1 := BIT_OF_DWORD(BYTE_TO_DWORD(temp),0); (* temp.0 *)
        4:  437:  Y2 := BIT_OF_DWORD(BYTE_TO_DWORD(temp),1); (* temp.1 *)
        4:  438:  Y3 := BIT_OF_DWORD(BYTE_TO_DWORD(temp),2); (* temp.2 *)
        4:  439:  Y4 := BIT_OF_DWORD(BYTE_TO_DWORD(temp),3); (* temp.3 *)
        -:  440:
        -:  441:  (* Fromm Oscat Library, www.oscat.de *)
        -:  442:END_FUNCTION_BLOCK
        -:  443:
        -:  444:FUNCTION_BLOCK FB_TEST_0
        -:  445:  VAR_OUTPUT
        -:  446:    Finished : BOOL;
        -:  447:    Failed : BOOL;
        4:  448:  END_VAR
        -:  449:  VAR
        4:  450:    TestBlock : MATRIX;
        4:  451:    TestState : INT;
        -:  452:    Timer : TON;
        -:  453:  END_VAR
        -:  454:
        3:  455:  Timer(IN:=TRUE, PT:= T#0s); (* placeholder for later usage *)
        3:  456:  
        3:  457:  CASE testState OF
        4:  458:    0:
       4*:  459:      IF (Timer.Q) THEN
       2*:  460:        TestBlock(X1 := TRUE, X2 := FALSE, X3 := TRUE, X4 := FALSE, X5 := TRUE, RELEASE := FALSE);
       3*:  461:        TestState:=TestState+1;
       2*:  462:      END_IF;
        4:  463:      Timer(IN:=TRUE, PT:=T#0s);
       4*:  464:    1:
        5:  465:      IF (Timer.Q) THEN
        1:  466:      {printf("0,0: TestBlock.CODE = 1  actual=%lf\n", (double)__GET_VAR(data__->TESTBLOCK.CODE,));}
        1:  467:      {printf("0,0: TestBlock._TP = FALSE  actual=%lf\n", (double)__GET_VAR(data__->TESTBLOCK._TP,));}
        1:  468:      {printf("0,0: TestBlock.Y1 = TRUE  actual=%lf\n", (double)__GET_VAR(data__->TESTBLOCK.Y1,));}
        1:  469:      {printf("0,0: TestBlock.Y2 = FALSE  actual=%lf\n", (double)__GET_VAR(data__->TESTBLOCK.Y2,));}
        1:  470:      {printf("0,0: TestBlock.Y3 = TRUE  actual=%lf\n", (double)__GET_VAR(data__->TESTBLOCK.Y3,));}
        4:  471:      {printf("0,0: TestBlock.Y4 = FALSE  actual=%lf\n", (double)__GET_VAR(data__->TESTBLOCK.Y4,));}
       2*:  472:        IF NOT(TestBlock.CODE = 1 AND TestBlock._TP = FALSE AND TestBlock.Y1 = TRUE AND TestBlock.Y2 = FALSE AND TestBlock.Y3 = TRUE AND TestBlock.Y4 = FALSE) THEN Failed := TRUE; END_IF;
       1*:  473:      END_IF;
        1:  474:      Finished:=TRUE;
        -:  475:  END_CASE;
        3:  476:END_FUNCTION_BLOCK
        -:  477:
        3:  478:FUNCTION_BLOCK FB_TEST_1
        -:  479:  VAR_OUTPUT
        3:  480:    Finished : BOOL;
        3:  481:    Failed : BOOL;
        -:  482:  END_VAR
        -:  483:  VAR
        -:  484:    TestBlock : MATRIX;
        -:  485:    TestState : INT;
        -:  486:    Timer : TON;
        -:  487:  END_VAR
        1:  488:
       4*:  489:  Timer(IN:=TRUE, PT:= T#0s); (* placeholder for later usage *)
       4*:  490:  
       4*:  491:  CASE testState OF
       1*:  492:    0:
        4:  493:      IF (Timer.Q) THEN
       2*:  494:        TestBlock(X1 := FALSE, X2 := TRUE, X3 := FALSE, X4 := TRUE, X5 := FALSE, RELEASE := TRUE);
        3:  495:        TestState:=TestState+1;
        1:  496:      END_IF;
        3:  497:      Timer(IN:=TRUE, PT:=T#0s);
        3:  498:    1:
        4:  499:      IF (Timer.Q) THEN
        1:  500:      {printf("1,0: TestBlock.CODE = 2  actual=%lf\n", (double)__GET_VAR(data__->TESTBLOCK.CODE,));}
        4:  501:      {printf("1,0: TestBlock._TP = TRUE  actual=%lf\n", (double)__GET_VAR(data__->TESTBLOCK._TP,));}
       1*:  502:      {printf("1,0: TestBlock.Y1 = FALSE  actual=%lf\n", (double)__GET_VAR(data__->TESTBLOCK.Y1,));}
       1*:  503:      {printf("1,0: TestBlock.Y2 = TRUE  actual=%lf\n", (double)__GET_VAR(data__->TESTBLOCK.Y2,));}
        1:  504:      {printf("1,0: TestBlock.Y3 = FALSE  actual=%lf\n", (double)__GET_VAR(data__->TESTBLOCK.Y3,));}
        1:  505:      {printf("1,0: TestBlock.Y4 = TRUE  actual=%lf\n", (double)__GET_VAR(data__->TESTBLOCK.Y4,));}
       5*:  506:        IF NOT(TestBlock.CODE = 2 AND TestBlock._TP = TRUE AND TestBlock.Y1 = FALSE AND TestBlock.Y2 = TRUE AND TestBlock.Y3 = FALSE AND TestBlock.Y4 = TRUE) THEN Failed := TRUE; END_IF;
        1:  507:      END_IF;
        1:  508:      Finished:=TRUE;
        -:  509:  END_CASE;
        -:  510:END_FUNCTION_BLOCK
        -:  511:
        3:  512:FUNCTION_BLOCK FB_TEST_2
        -:  513:  VAR_OUTPUT
        3:  514:    Finished : BOOL;
        3:  515:    Failed : BOOL;
        -:  516:  END_VAR
        -:  517:  VAR
        -:  518:    TestBlock : MATRIX;
        -:  519:    TestState : INT;
        -:  520:    Timer : TON;
        -:  521:  END_VAR
        1:  522:
       4*:  523:  Timer(IN:=TRUE, PT:= T#0s); (* placeholder for later usage *)
       4*:  524:  
       4*:  525:  CASE testState OF
       1*:  526:    0:
        4:  527:      IF (Timer.Q) THEN
       2*:  528:        TestBlock(X1 := TRUE, X2 := TRUE, X3 := TRUE, X4 := TRUE, X5 := TRUE, RELEASE := FALSE);
        3:  529:        TestState:=TestState+1;
        1:  530:      END_IF;
        3:  531:      Timer(IN:=TRUE, PT:=T#0s);
        3:  532:    1:
        4:  533:      IF (Timer.Q) THEN
        1:  534:      {printf("2,0: TestBlock.CODE = 3  actual=%lf\n", (double)__GET_VAR(data__->TESTBLOCK.CODE,));}
        4:  535:      {printf("2,0: TestBlock._TP = FALSE  actual=%lf\n", (double)__GET_VAR(data__->TESTBLOCK._TP,));}
       1*:  536:      {printf("2,0: TestBlock.Y1 = TRUE  actual=%lf\n", (double)__GET_VAR(data__->TESTBLOCK.Y1,));}
       1*:  537:      {printf("2,0: TestBlock.Y2 = TRUE  actual=%lf\n", (double)__GET_VAR(data__->TESTBLOCK.Y2,));}
        1:  538:      {printf("2,0: TestBlock.Y3 = TRUE  actual=%lf\n", (double)__GET_VAR(data__->TESTBLOCK.Y3,));}
        1:  539:      {printf("2,0: TestBlock.Y4 = TRUE  actual=%lf\n", (double)__GET_VAR(data__->TESTBLOCK.Y4,));}
       5*:  540:        IF NOT(TestBlock.CODE = 3 AND TestBlock._TP = FALSE AND TestBlock.Y1 = TRUE AND TestBlock.Y2 = TRUE AND TestBlock.Y3 = TRUE AND TestBlock.Y4 = TRUE) THEN Failed := TRUE; END_IF;
        1:  541:      END_IF;
        1:  542:      Finished:=TRUE;
        -:  543:  END_CASE;
        -:  544:END_FUNCTION_BLOCK
        -:  545:
        3:  546:FUNCTION_BLOCK FB_TEST_3
        -:  547:  VAR_OUTPUT
        3:  548:    Finished : BOOL;
        3:  549:    Failed : BOOL;
        -:  550:  END_VAR
        -:  551:  VAR
        -:  552:    TestBlock : MATRIX;
        -:  553:    TestState : INT;
        -:  554:    Timer : TON;
        -:  555:  END_VAR
        1:  556:
       4*:  557:  Timer(IN:=TRUE, PT:= T#0s); (* placeholder for later usage *)
       4*:  558:  
       4*:  559:  CASE testState OF
       1*:  560:    0:
        4:  561:      IF (Timer.Q) THEN
       2*:  562:        TestBlock(X1 := FALSE, X2 := FALSE, X3 := FALSE, X4 := FALSE, X5 := FALSE, RELEASE := TRUE);
        3:  563:        TestState:=TestState+1;
        1:  564:      END_IF;
        3:  565:      Timer(IN:=TRUE, PT:=T#0s);
        3:  566:    1:
        4:  567:      IF (Timer.Q) THEN
        1:  568:      {printf("3,0: TestBlock.CODE = 0  actual=%lf\n", (double)__GET_VAR(data__->TESTBLOCK.CODE,));}
        4:  569:      {printf("3,0: TestBlock._TP = TRUE  actual=%lf\n", (double)__GET_VAR(data__->TESTBLOCK._TP,));}
       1*:  570:      {printf("3,0: TestBlock.Y1 = FALSE  actual=%lf\n", (double)__GET_VAR(data__->TESTBLOCK.Y1,));}
       1*:  571:      {printf("3,0: TestBlock.Y2 = FALSE  actual=%lf\n", (double)__GET_VAR(data__->TESTBLOCK.Y2,));}
        1:  572:      {printf("3,0: TestBlock.Y3 = FALSE  actual=%lf\n", (double)__GET_VAR(data__->TESTBLOCK.Y3,));}
        1:  573:      {printf("3,0: TestBlock.Y4 = FALSE  actual=%lf\n", (double)__GET_VAR(data__->TESTBLOCK.Y4,));}
       5*:  574:        IF NOT(TestBlock.CODE = 0 AND TestBlock._TP = TRUE AND TestBlock.Y1 = FALSE AND TestBlock.Y2 = FALSE AND TestBlock.Y3 = FALSE AND TestBlock.Y4 = FALSE) THEN Failed := TRUE; END_IF;
        1:  575:      END_IF;
        1:  576:      Finished:=TRUE;
        -:  577:  END_CASE;
        -:  578:END_FUNCTION_BLOCK
        -:  579:
        3:  580:
        -:  581:PROGRAM TestRunnerProgram
        3:  582:VAR
        3:  583:  testResult AT %QX0.0 : BOOL := FALSE;
        -:  584:END_VAR
        -:  585:VAR
        -:  586:  totalTests AT %QW0 : INT := 0;
        -:  587:  passedTests AT %QW1 : INT := 0;
        -:  588:END_VAR
        -:  589:VAR
        1:  590:  i: INT := 0;
       1*:  591:  testOutcomeArray : ARRAY [0..3] OF BOOL;
        1:  592:  Test_0: FB_TEST_0;
       1*:  593:  Test_1: FB_TEST_1;
        1:  594:  Test_2: FB_TEST_2;
       1*:  595:  Test_3: FB_TEST_3;
        1:  596:END_VAR
       1*:  597:
       3*:  598:  IF NOT Test_0.Finished AND NOT Test_0.FAILED THEN totalTests := totalTests + 1; Test_0(); END_IF;
       10:  599:  IF Test_0.Finished THEN testOutcomeArray[0] := TRUE; END_IF;
      11*:  600:  IF NOT Test_1.Finished AND NOT Test_1.FAILED THEN totalTests := totalTests + 1; Test_1(); END_IF;
       10:  601:  IF Test_1.Finished THEN testOutcomeArray[1] := TRUE; END_IF;
      11*:  602:  IF NOT Test_2.Finished AND NOT Test_2.FAILED THEN totalTests := totalTests + 1; Test_2(); END_IF;
       11:  603:  IF Test_2.Finished THEN testOutcomeArray[2] := TRUE; END_IF;
      11*:  604:  IF NOT Test_3.Finished AND NOT Test_3.FAILED THEN totalTests := totalTests + 1; Test_3(); END_IF;
       11:  605:  IF Test_3.Finished THEN testOutcomeArray[3] := TRUE; END_IF;
        1:  606:
       10:  607:  passedTests := 0;
        -:  608:  FOR i:=0 TO 3 DO
      60*:  609:    IF testOutcomeArray[i]=TRUE THEN passedTests := passedTests+1; END_IF;
       50:  610:  END_FOR;
        -:  611:END_PROGRAM
       40:  612:
        -:  613:
        -:  614:
       10:  615:CONFIGURATION Config0
        -:  616:
       10:  617:  RESOURCE Res0 ON PLC
       10:  618:    TASK task0(INTERVAL := T#100ms,PRIORITY := 0);
        -:  619:    PROGRAM instance0 WITH task0 : TestRunnerProgram;
        -:  620:  END_RESOURCE
        -:  621:END_CONFIGURATION
        -:  622:
        -:  623:
