        -:    0:Source:../ETFA-Tests2/TRAFFIC_CTRL_FullTest.st
        -:    0:Graph:Res0.gcno
        -:    0:Data:Res0.gcda
        -:    0:Runs:1
        -:    1:FUNCTION BIT_OF_DWORD : BOOL
        -:    2:  VAR_INPUT
        -:    3:    IN : DWORD;
        -:    4:    N : INT;
        -:    5:  END_VAR
        -:    6:
    #####:    7:  BIT_OF_DWORD := (SHR(in,N) AND 16#00000001) > 0;
        -:    8:  (* from OSCAT library; www.oscat.de  *)
        -:    9:END_FUNCTION
        -:   10:
    #####:   11:FUNCTION SIGN_R : BOOL
        -:   12:  VAR_INPUT
    #####:   13:    IN : REAL;
        -:   14:  END_VAR
    #####:   15:
    #####:   16:  SIGN_R := in < 0.0;
    #####:   17:  (* from OSCAT library; www.oscat.de  *)
    #####:   18:END_FUNCTION
    #####:   19:
    #####:   20:FUNCTION FLOOR : INT
    #####:   21:  VAR_INPUT
    #####:   22:    x : REAL;
        -:   23:  END_VAR
    #####:   24:
    #####:   25:  FLOOR := REAL_TO_INT(X);
    #####:   26:  IF INT_TO_REAL(FLOOR) > X THEN
    #####:   27:  	floor := floor - 1;
        -:   28:  END_IF;
    #####:   29:  (* from OSCAT library; www.oscat.de  *)
    #####:   30:END_FUNCTION
        -:   31:
    #####:   32:FUNCTION FLOOR2 : DINT
    #####:   33:  VAR_INPUT
    #####:   34:    x : REAL;
    #####:   35:  END_VAR
    #####:   36:
    #####:   37:  FLOOR2 := REAL_TO_DINT(X);
    #####:   38:  IF DINT_TO_REAL(FLOOR2) > X THEN
    #####:   39:  	FLOOR2 := FLOOR2 - DINT#1;
    #####:   40:  END_IF;
    #####:   41:  (* from OSCAT library; www.oscat.de  *)
    #####:   42:END_FUNCTION
        -:   43:
    #####:   44:FUNCTION MODR : REAL
    #####:   45:  VAR_INPUT
    #####:   46:    IN : REAL;
    #####:   47:    DIVI : REAL;
    #####:   48:  END_VAR
        -:   49:
    #####:   50:  IF divi = 0.0 THEN
    #####:   51:  	MODR := 0.0;
    #####:   52:  ELSE
    #####:   53:  	MODR := in - DINT_TO_REAL(FLOOR2(in / divi)) * divi;
    #####:   54:  END_IF;
        -:   55:  (* from OSCAT library; www.oscat.de  *)
    #####:   56:  (* FC FLOOR2 required *)
        -:   57:END_FUNCTION
        -:   58:
    #####:   59:FUNCTION REVERSE : BYTE
    #####:   60:  VAR_INPUT
        -:   61:    IN : BYTE;
    #####:   62:  END_VAR
    #####:   63:
    #####:   64:  reverse := SHL(in,7) OR SHR(in,7) OR (ROR(in,3) AND BYTE#2#01000100) OR (ROL(in,3) AND BYTE#2#00100010)
    #####:   65:  	OR (SHL(in,1) AND BYTE#2#00010000) OR (SHR(in,1) AND BYTE#2#00001000);
    #####:   66:
    #####:   67:
    #####:   68:  (* Fromm Oscat Library, www.oscat.de *)
        -:   69:END_FUNCTION
        -:   70:
        -:   71:FUNCTION REFLECT : DWORD
    #####:   72:  VAR_INPUT
    #####:   73:    DI : DWORD;
        -:   74:    L : INT;
        -:   75:  END_VAR
    #####:   76:  VAR
        -:   77:    i : INT;
    #####:   78:    _d : DWORD;
    #####:   79:  END_VAR
    #####:   80:
    #####:   81:  _d := DI;
    #####:   82:  FOR i := 1 TO L DO
    #####:   83:  	REFLECT := SHL(REFLECT, 1) OR BOOL_TO_DWORD((_d AND DWORD#2#0000_0001) > DWORD#0); (* D.0 *)
    #####:   84:  	_d := SHR(_d, 1);
        -:   85:  END_FOR;
    #####:   86:  REFLECT := REFLECT OR SHL(_d, L);
    #####:   87:
    #####:   88:
        -:   89:  (* Fromm Oscat Library, www.oscat.de *)
    #####:   90:END_FUNCTION
        -:   91:
    #####:   92:
    #####:   93:FUNCTION BIT_LOAD_B : BYTE
    #####:   94:  VAR_INPUT
    #####:   95:    IN : BYTE;
    #####:   96:    VAL : BOOL;
        -:   97:    POS : INT;
    #####:   98:  END_VAR
        -:   99:
    #####:  100:  IF VAL THEN
    #####:  101:  	BIT_LOAD_B := in OR SHL(BYTE#1,pos);
        -:  102:  ELSE
    #####:  103:  	BIT_LOAD_B := in AND (NOT SHL(BYTE#1,pos));
        -:  104:  END_IF;
        -:  105:
        -:  106:  (*From OSCAT Library, www.oscat.de*)
    #####:  107:END_FUNCTION
    #####:  108:
    #####:  109:FUNCTION _BYTE_TO_INT : INT
    #####:  110:  VAR_INPUT
    #####:  111:    IN : BYTE;
    #####:  112:  END_VAR
    #####:  113:
    #####:  114:  _BYTE_TO_INT := USINT_TO_INT(BYTE_TO_USINT(IN));
    #####:  115:
    #####:  116:  (*From OSCAT Library, www.oscat.de*)
    #####:  117:END_FUNCTION
    #####:  118:
        -:  119:FUNCTION T_PLC_MS : UDINT
        -:  120:  VAR
    #####:  121:    tx : UDINT;
    #####:  122:  END_VAR
        -:  123:  VAR_INPUT
    #####:  124:    debug : BOOL;
    #####:  125:  END_VAR
    #####:  126:  VAR
    #####:  127:    N : INT := 0;
    #####:  128:    offset : UDINT := 0;
        -:  129:    temp : DWORD := 1;
    #####:  130:  END_VAR
    #####:  131:
    #####:  132:  tx := 0;
    #####:  133:  {extern unsigned long __tick;
    #####:  134:  extern unsigned long long common_ticktime__;
        -:  135:  unsigned long long ticktime_ms = (common_ticktime__)/1000000;
        -:  136:  UDINT plc_time = (UDINT)(ticktime_ms * (unsigned long long)__tick);
    #####:  137:  TX = plc_time}
    #####:  138:  T_PLC_MS := tx;
    #####:  139:  IF debug THEN
    #####:  140:  	T_PLC_MS := (DWORD_TO_UDINT(SHL(UDINT_TO_DWORD(T_PLC_MS),N) OR SHL(temp,N))-1) + OFFSET;
    #####:  141:  END_IF;
    #####:  142:  
    #####:  143:
    #####:  144:  IF debug THEN
    #####:  145:  	T_PLC_MS := (DWORD_TO_UDINT(SHL(UDINT_TO_DWORD(T_PLC_MS),N) OR SHL(temp,N))-1) + OFFSET;
    #####:  146:  END_IF;
    #####:  147:
    #####:  148:  (* Original Code:
        -:  149:  tx := TIME();
    #####:  150:  T_PLC_MS := TIME_TO_DWORD(Tx);
    #####:  151:  IF debug THEN
        -:  152:  	T_PLC_MS := (SHL(T_PLC_MS,N) OR SHL(DWORD#1,N)-1) + OFFSET;
        -:  153:  END_IF;
    #####:  154:  *)
    #####:  155:
        -:  156:  (* From OSCAT library, www.oscat.de
        -:  157:
        -:  158:  this is a temporary T_PLC_MS FB until OpenPLC gets it´s own time() functionality *)
    #####:  159:
        -:  160:  (* PLC_TIME and Global variables PLC_SCAN_CYCL and PLC_CYCL_TIME required *)
        -:  161:END_FUNCTION
    #####:  162:
        -:  163:
    #####:  164:FUNCTION T_PLC_US : UDINT
    #####:  165:  VAR
    #####:  166:    tx : UDINT;
        -:  167:  END_VAR
    #####:  168:  VAR_INPUT
        -:  169:    debug : BOOL;
        -:  170:  END_VAR
        -:  171:  VAR
        -:  172:    N : INT := 0;
    #####:  173:    offset : UDINT := 0;
        -:  174:    temp : DWORD := 1;
        -:  175:  END_VAR
        -:  176:
    #####:  177:  T_PLC_US := tx*1000;
    #####:  178:  IF debug THEN
    #####:  179:  	T_PLC_US := (DWORD_TO_UDINT(SHL(UDINT_TO_DWORD(T_PLC_US),N) OR SHL(temp,N))-1) + OFFSET;
    #####:  180:  END_IF;
    #####:  181:
    #####:  182:  (* Original Code:
    #####:  183:  tx := TIME();
        -:  184:  T_PLC_US := TIME_TO_DWORD(Tx)*1000;
    #####:  185:  IF debug THEN
    #####:  186:  	T_PLC_US := (SHL(T_PLC_US,N) OR SHL(DWORD#1,N)-1) + OFFSET;
    #####:  187:  END_IF;
    #####:  188:  *)
    #####:  189:
    #####:  190:  (* From OSCAT library, www.oscat.de
        -:  191:
        -:  192:  this is a temporary T_PLC_US FB until OpenPLC gets it´s own time() functionality *)
    #####:  193:
        -:  194:  (* PLC_TIME and Global variables PLC_SCAN_CYCL and PLC_CYCL_TIME required *)
        -:  195:END_FUNCTION
    #####:  196:
        -:  197:
    #####:  198:
    #####:  199:FUNCTION_BLOCK FT_DERIV
    #####:  200:  VAR_INPUT
        -:  201:    IN : REAL;
    #####:  202:    K : REAL := 1.0;
        -:  203:    RUN : BOOL := TRUE;
        -:  204:  END_VAR
        -:  205:  VAR_OUTPUT
    #####:  206:    OUT : REAL;
    #####:  207:  END_VAR
    #####:  208:  VAR
    #####:  209:    old : REAL;
    #####:  210:    tx : UDINT;
    #####:  211:    last : UDINT;
    #####:  212:    init : BOOL;
    #####:  213:    tc : REAL;
    #####:  214:  END_VAR
    #####:  215:
    #####:  216:  tx:= T_PLC_US(en:=true);
    #####:  217:  tc := UDINT_TO_REAL(tx - last);
    #####:  218:
        -:  219:  (* init on firsat startup *)
    #####:  220:  IF NOT init THEN
    #####:  221:  	init := TRUE;
    #####:  222:  	old := in;
    #####:  223:  ELSIF run AND tc > 0.0 THEN
    #####:  224:  	out := (in - old) / tc * 1000000.0 * K;
    #####:  225:  	old := in;
        -:  226:  ELSE
    #####:  227:  	out := 0.0;
    #####:  228:  END_IF;
        -:  229:
    #####:  230:  last := tx;
        -:  231:
    #####:  232:  (* From OSCAT Library, www.oscat.de *)
        -:  233:  (* T_PLC_US, required *)
    #####:  234:END_FUNCTION_BLOCK
    #####:  235:
        -:  236:
        -:  237:FUNCTION_BLOCK FT_PIWL
        -:  238:  VAR_INPUT
        -:  239:    IN : REAL;
        -:  240:    KP : REAL := 1.0;
        -:  241:    KI : REAL := 1.0;
    #####:  242:    LIM_L : REAL := -1.0E38;
    #####:  243:    LIM_H : REAL := 1.0E38;
    #####:  244:    RST : BOOL;
    #####:  245:  END_VAR
    #####:  246:  VAR_OUTPUT
    #####:  247:    Y : REAL;
    #####:  248:    LIM : BOOL;
    #####:  249:  END_VAR
    #####:  250:  VAR
    #####:  251:    init : BOOL;
    #####:  252:    tx : UDINT;
    #####:  253:    tc : REAL;
    #####:  254:    t_last : UDINT;
    #####:  255:    in_last : REAL;
    #####:  256:    i : REAL;
    #####:  257:    p : REAL;
    #####:  258:  END_VAR
    #####:  259:
    #####:  260:  IF NOT init OR RST THEN
    #####:  261:  	init := TRUE;
    #####:  262:  	in_last := in;
    #####:  263:  		t_last := T_PLC_US(en:=true);
    #####:  264:  	i := 0.0;
    #####:  265:  	tc := 0.0;
    #####:  266:  ELSE
    #####:  267:  	(* read last cycle time in Microseconds *)
    #####:  268:  		tx := T_PLC_US(en:=true);
    #####:  269:  	tc := UDINT_TO_REAL(tx - t_last);
    #####:  270:  	t_last := tx;
        -:  271:
        -:  272:  	(* calculate proportional part *)
    #####:  273:  	p := KP * IN;
        -:  274:
        -:  275:  	(* run integrator *)
    #####:  276:  	i := (IN + in_last) * 5.0E-7 * KI * tc + i;
    #####:  277:  	in_last := IN;
        -:  278:
        -:  279:  	(* calculate output Y *)
    #####:  280:  	Y := p + i;
        -:  281:
        -:  282:  	(* check output for limits *)
    #####:  283:  	IF Y >= LIM_H THEN
    #####:  284:  		Y := LIM_H;
    #####:  285:  		IF ki <> 0.0 THEN
    #####:  286:  			i := LIM_H - p;
        -:  287:  		ELSE
    #####:  288:  			i := 0.0;
        -:  289:  		END_IF;
    #####:  290:  		LIM := TRUE;
    #####:  291:  	ELSIF Y <= LIM_L THEN
    #####:  292:  		Y := LIM_L;
    #####:  293:  		IF ki <> 0.0 THEN
    #####:  294:  			i := LIM_L - p;
        -:  295:  		ELSE
    #####:  296:  			i := 0.0;
        -:  297:  		END_IF;
    #####:  298:  		LIM := TRUE;
        -:  299:  	ELSE
    #####:  300:  		LIM := FALSE;
        -:  301:  	END_IF;
        -:  302:  END_IF;
        -:  303:
    #####:  304:  (* From OSCAT Library, www.oscat.de *)
        -:  305:  (* T_PLC_US required *)
    #####:  306:END_FUNCTION_BLOCK
    #####:  307:
        -:  308:
        -:  309:FUNCTION_BLOCK INTEGRATE
        -:  310:  VAR_INPUT
        -:  311:    _E : BOOL := TRUE;
        -:  312:    X : REAL;
        -:  313:    K : REAL := 1.0;
    #####:  314:  END_VAR
    #####:  315:  VAR_IN_OUT
    #####:  316:    Y : REAL;
    #####:  317:  END_VAR
    #####:  318:  VAR
    #####:  319:    x_last : REAL;
    #####:  320:    init : BOOL;
    #####:  321:    last : UDINT;
    #####:  322:    tx : UDINT;
    #####:  323:  END_VAR
    #####:  324:
    #####:  325:  tx:= T_PLC_MS(en:=true);
        -:  326:
    #####:  327:  IF NOT init THEN
    #####:  328:  	init := TRUE;
    #####:  329:  	X_last := X;
    #####:  330:  ELSIF _E THEN
    #####:  331:  	Y := (X + X_LAST) * 0.5E-3 * UDINT_TO_REAL(tx-last) * K + Y;
    #####:  332:  	X_last := X;
        -:  333:  END_IF;
    #####:  334:  last := tx;
    #####:  335:
    #####:  336:  (* From OSCAT Library, www.oscat.de *)
        -:  337:  (* T_PLC_MS required *)
    #####:  338:END_FUNCTION_BLOCK
    #####:  339:
        -:  340:FUNCTION_BLOCK TRAFFIC_CTRL
        -:  341:
        -:  342:
        -:  343:VAR_INPUT
        -:  344:    PedestrianButton1 : BOOL;
        -:  345:    PedestrianButton2 : BOOL;
        2:  346:END_VAR
       2*:  347:
       2*:  348:VAR_OUTPUT
       2*:  349:    NorthSouthRed : BOOL;
       2*:  350:    NorthSouthYellow : BOOL;
       2*:  351:    NorthSouthGreen : BOOL;
       2*:  352:    EastWestRed : BOOL;
       2*:  353:    EastWestYellow : BOOL;
       2*:  354:    EastWestGreen : BOOL;
       2*:  355:    PedestrianLight1 : BOOL;
       2*:  356:    PedestrianLight2 : BOOL;
       2*:  357:END_VAR
       2*:  358:
       2*:  359:VAR
       2*:  360:    LightState : INT := 0; (* 0: North-South Green, 1: North-South Yellow, 2: East-West Green, 3: East-West Yellow *)
       2*:  361:    PedestrianRequest1 : BOOL := FALSE;
       2*:  362:    PedestrianRequest2 : BOOL := FALSE;
        2:  363:    PedestrianCrossing : BOOL := FALSE;
        2:  364:    Timer : TON;
        -:  365:END_VAR
        -:  366:
        4:  367:(* Check for pedestrian requests *)
        4:  368:IF PedestrianButton1 THEN
        5:  369:    PedestrianRequest1 := TRUE;
    #####:  370:END_IF;
    #####:  371:
        4:  372:IF PedestrianButton2 THEN
        1:  373:    PedestrianRequest2 := TRUE;
        4:  374:END_IF;
        -:  375:
        -:  376:(* Traffic light state machine *)
        -:  377:CASE LightState OF
        4:  378:    0: (* North-South Green *)
        4:  379:        NorthSouthGreen := TRUE;
        4:  380:        EastWestRed := TRUE;
        4:  381:        IF PedestrianRequest1 OR PedestrianRequest2 THEN
        3:  382:            Timer(IN := TRUE, PT := T#2s); (* Pedestrian crossing grace period *)
        6:  383:            IF Timer.Q THEN
       3*:  384:                Timer(IN := FALSE);
    #####:  385:                LightState := 1;
        -:  386:            END_IF;
        -:  387:        END_IF;
        -:  388:
    #####:  389:    1: (* North-South Yellow *)
    #####:  390:        NorthSouthYellow := TRUE;
    #####:  391:        EastWestRed := TRUE;
    #####:  392:        Timer(IN := TRUE, PT := T#2s); (* Yellow light duration *)
    #####:  393:        IF Timer.Q THEN
    #####:  394:            Timer(IN := FALSE);
    #####:  395:            LightState := 2;
        -:  396:        END_IF;
        -:  397:
    #####:  398:    2: (* East-West Green *)
    #####:  399:        EastWestGreen := TRUE;
    #####:  400:        NorthSouthRed := TRUE;
    #####:  401:        IF PedestrianRequest1 THEN
    #####:  402:            PedestrianLight1 := TRUE;
    #####:  403:            PedestrianCrossing := TRUE;
        -:  404:        END_IF;
    #####:  405:        IF PedestrianRequest2 THEN
    #####:  406:            PedestrianLight2 := TRUE;
    #####:  407:            PedestrianCrossing := TRUE;
        -:  408:        END_IF;
    #####:  409:        IF PedestrianCrossing THEN
    #####:  410:            Timer(IN := TRUE, PT := T#2s); (* Pedestrian crossing period *)
    #####:  411:            IF Timer.Q THEN
    #####:  412:                Timer(IN := FALSE);
    #####:  413:                PedestrianRequest1 := FALSE;
    #####:  414:                PedestrianRequest2 := FALSE;
    #####:  415:                PedestrianLight1 := FALSE;
    #####:  416:                PedestrianLight2 := FALSE;
    #####:  417:                PedestrianCrossing := FALSE;
    #####:  418:                LightState := 3;
        -:  419:            END_IF;
        -:  420:        END_IF;
        -:  421:
    #####:  422:    3: (* East-West Yellow *)
    #####:  423:        EastWestYellow := TRUE;
    #####:  424:        NorthSouthRed := TRUE;
    #####:  425:        Timer(IN := TRUE, PT := T#2s); (* Yellow light duration *)
    #####:  426:        IF Timer.Q THEN
    #####:  427:            Timer(IN := FALSE);
    #####:  428:            LightState := 0;
        -:  429:        END_IF;
        -:  430:
        -:  431:END_CASE;
        -:  432:
        4:  433:END_FUNCTION_BLOCK
        -:  434:
        4:  435:FUNCTION_BLOCK FB_TEST_0
        4:  436:  VAR_OUTPUT
        -:  437:    Finished : BOOL;
        -:  438:    Failed : BOOL;
        -:  439:  END_VAR
        -:  440:  VAR
        -:  441:    TestBlock : TRAFFIC_CTRL;
        -:  442:    TestState : INT;
        1:  443:    Timer : TON;
       1*:  444:  END_VAR
       1*:  445:
       5*:  446:  Timer(IN:=TRUE, PT:= T#0s); (* placeholder for later usage *)
       5*:  447:  
        5:  448:  CASE testState OF
       1*:  449:    0:
        5:  450:      IF (Timer.Q) THEN
        1:  451:        TestBlock(PedestrianButton1 := FALSE, PedestrianButton2 := FALSE);
        2:  452:        TestState:=TestState+1;
        1:  453:      END_IF;
        2:  454:      Timer(IN:=TRUE, PT:=T#0s);
        2:  455:    1:
        7:  456:      IF (Timer.Q) THEN
    #####:  457:      {printf("0,0: TestBlock.NorthSouthRed = FALSE  actual=%lf\n", (double)__GET_VAR(data__->TESTBLOCK.NORTHSOUTHRED,));}
       2*:  458:      {printf("0,0: TestBlock.NorthSouthYellow = FALSE  actual=%lf\n", (double)__GET_VAR(data__->TESTBLOCK.NORTHSOUTHYELLOW,));}
        1:  459:      {printf("0,0: TestBlock.NorthSouthGreen = TRUE  actual=%lf\n", (double)__GET_VAR(data__->TESTBLOCK.NORTHSOUTHGREEN,));}
        1:  460:      {printf("0,0: TestBlock.EastWestRed = TRUE  actual=%lf\n", (double)__GET_VAR(data__->TESTBLOCK.EASTWESTRED,));}
        5:  461:      {printf("0,0: TestBlock.EastWestYellow = FALSE  actual=%lf\n", (double)__GET_VAR(data__->TESTBLOCK.EASTWESTYELLOW,));}
        1:  462:      {printf("0,0: TestBlock.EastWestGreen = FALSE  actual=%lf\n", (double)__GET_VAR(data__->TESTBLOCK.EASTWESTGREEN,));}
        1:  463:      {printf("0,0: TestBlock.PedestrianLight1 = FALSE  actual=%lf\n", (double)__GET_VAR(data__->TESTBLOCK.PEDESTRIANLIGHT1,));}
        1:  464:      {printf("0,0: TestBlock.PedestrianLight2 = FALSE  actual=%lf\n", (double)__GET_VAR(data__->TESTBLOCK.PEDESTRIANLIGHT2,));}
       2*:  465:        IF NOT (TestBlock.NorthSouthRed = FALSE AND TestBlock.NorthSouthYellow = FALSE AND TestBlock.NorthSouthGreen = TRUE AND TestBlock.EastWestRed = TRUE AND TestBlock.EastWestYellow = FALSE AND TestBlock.EastWestGreen = FALSE AND TestBlock.PedestrianLight1 = FALSE AND TestBlock.PedestrianLight2 = FALSE) THEN Failed := TRUE; END_IF;
        2:  466:        TestBlock(PedestrianButton1 := TRUE, PedestrianButton2 := FALSE);
        2:  467:        TestState:=TestState+1;
        1:  468:      END_IF;
        1:  469:      Timer(IN:=TRUE, PT:=T#0s);
        1:  470:    2:
        2:  471:      IF (Timer.Q) THEN
        -:  472:      {printf("0,1: TestBlock.NorthSouthRed = FALSE  actual=%lf\n", (double)__GET_VAR(data__->TESTBLOCK.NORTHSOUTHRED,));}
        1:  473:      {printf("0,1: TestBlock.NorthSouthYellow = TRUE  actual=%lf\n", (double)__GET_VAR(data__->TESTBLOCK.NORTHSOUTHYELLOW,));}
        1:  474:      {printf("0,1: TestBlock.NorthSouthGreen = FALSE  actual=%lf\n", (double)__GET_VAR(data__->TESTBLOCK.NORTHSOUTHGREEN,));}
        1:  475:      {printf("0,1: TestBlock.EastWestRed = TRUE  actual=%lf\n", (double)__GET_VAR(data__->TESTBLOCK.EASTWESTRED,));}
        1:  476:      {printf("0,1: TestBlock.EastWestYellow = FALSE  actual=%lf\n", (double)__GET_VAR(data__->TESTBLOCK.EASTWESTYELLOW,));}
        1:  477:      {printf("0,1: TestBlock.EastWestGreen = FALSE  actual=%lf\n", (double)__GET_VAR(data__->TESTBLOCK.EASTWESTGREEN,));}
        1:  478:      {printf("0,1: TestBlock.PedestrianLight1 = FALSE  actual=%lf\n", (double)__GET_VAR(data__->TESTBLOCK.PEDESTRIANLIGHT1,));}
        1:  479:      {printf("0,1: TestBlock.PedestrianLight2 = FALSE  actual=%lf\n", (double)__GET_VAR(data__->TESTBLOCK.PEDESTRIANLIGHT2,));}
       2*:  480:        IF NOT(TestBlock.NorthSouthRed = FALSE AND TestBlock.NorthSouthYellow = TRUE AND TestBlock.NorthSouthGreen = FALSE AND TestBlock.EastWestRed = TRUE AND TestBlock.EastWestYellow = FALSE AND TestBlock.EastWestGreen = FALSE AND TestBlock.PedestrianLight1 = FALSE AND TestBlock.PedestrianLight2 = FALSE) THEN Failed := TRUE; END_IF;
        1:  481:      END_IF;
        1:  482:      Finished:=TRUE;
        -:  483:  END_CASE;
        -:  484:END_FUNCTION_BLOCK
        -:  485:
        4:  486:FUNCTION_BLOCK FB_TEST_1
        -:  487:  VAR_OUTPUT
        4:  488:    Finished : BOOL;
        4:  489:    Failed : BOOL;
        -:  490:  END_VAR
        -:  491:  VAR
        -:  492:    TestBlock : TRAFFIC_CTRL;
        -:  493:    TestState : INT;
        -:  494:    Timer : TON;
        -:  495:  END_VAR
        1:  496:
       4*:  497:  Timer(IN:=TRUE, PT:= T#0s); (* placeholder for later usage *)
       4*:  498:  
       4*:  499:  CASE testState OF
       1*:  500:    0:
        4:  501:      IF (Timer.Q) THEN
       2*:  502:        TestBlock(PedestrianButton1 := FALSE, PedestrianButton2 := TRUE);
        3:  503:        TestState:=TestState+1;
        1:  504:      END_IF;
        2:  505:      Timer(IN:=TRUE, PT:=T#0s);
        2:  506:    1:
        3:  507:      IF (Timer.Q) THEN
        -:  508:      {printf("1,0: TestBlock.NorthSouthRed = TRUE  actual=%lf\n", (double)__GET_VAR(data__->TESTBLOCK.NORTHSOUTHRED,));}
        4:  509:      {printf("1,0: TestBlock.NorthSouthYellow = FALSE  actual=%lf\n", (double)__GET_VAR(data__->TESTBLOCK.NORTHSOUTHYELLOW,));}
       1*:  510:      {printf("1,0: TestBlock.NorthSouthGreen = FALSE  actual=%lf\n", (double)__GET_VAR(data__->TESTBLOCK.NORTHSOUTHGREEN,));}
       1*:  511:      {printf("1,0: TestBlock.EastWestRed = FALSE  actual=%lf\n", (double)__GET_VAR(data__->TESTBLOCK.EASTWESTRED,));}
        1:  512:      {printf("1,0: TestBlock.EastWestYellow = FALSE  actual=%lf\n", (double)__GET_VAR(data__->TESTBLOCK.EASTWESTYELLOW,));}
        1:  513:      {printf("1,0: TestBlock.EastWestGreen = TRUE  actual=%lf\n", (double)__GET_VAR(data__->TESTBLOCK.EASTWESTGREEN,));}
        4:  514:      {printf("1,0: TestBlock.PedestrianLight1 = FALSE  actual=%lf\n", (double)__GET_VAR(data__->TESTBLOCK.PEDESTRIANLIGHT1,));}
        1:  515:      {printf("1,0: TestBlock.PedestrianLight2 = TRUE  actual=%lf\n", (double)__GET_VAR(data__->TESTBLOCK.PEDESTRIANLIGHT2,));}
       2*:  516:        IF NOT (TestBlock.NorthSouthRed = TRUE AND TestBlock.NorthSouthYellow = FALSE AND TestBlock.NorthSouthGreen = FALSE AND TestBlock.EastWestRed = FALSE AND TestBlock.EastWestYellow = FALSE AND TestBlock.EastWestGreen = TRUE AND TestBlock.PedestrianLight1 = FALSE AND TestBlock.PedestrianLight2 = TRUE) THEN Failed := TRUE; END_IF;
        2:  517:        TestBlock(PedestrianButton1 := FALSE, PedestrianButton2 := FALSE);
        2:  518:        TestState:=TestState+1;
        1:  519:      END_IF;
        1:  520:      Timer(IN:=TRUE, PT:=T#0s);
        1:  521:    2:
       1*:  522:      IF (Timer.Q) THEN
        -:  523:      {printf("1,1: TestBlock.NorthSouthRed = TRUE  actual=%lf\n", (double)__GET_VAR(data__->TESTBLOCK.NORTHSOUTHRED,));}
    #####:  524:      {printf("1,1: TestBlock.NorthSouthYellow = FALSE  actual=%lf\n", (double)__GET_VAR(data__->TESTBLOCK.NORTHSOUTHYELLOW,));}
    #####:  525:      {printf("1,1: TestBlock.NorthSouthGreen = FALSE  actual=%lf\n", (double)__GET_VAR(data__->TESTBLOCK.NORTHSOUTHGREEN,));}
    #####:  526:      {printf("1,1: TestBlock.EastWestRed = FALSE  actual=%lf\n", (double)__GET_VAR(data__->TESTBLOCK.EASTWESTRED,));}
    #####:  527:      {printf("1,1: TestBlock.EastWestYellow = TRUE  actual=%lf\n", (double)__GET_VAR(data__->TESTBLOCK.EASTWESTYELLOW,));}
    #####:  528:      {printf("1,1: TestBlock.EastWestGreen = FALSE  actual=%lf\n", (double)__GET_VAR(data__->TESTBLOCK.EASTWESTGREEN,));}
    #####:  529:      {printf("1,1: TestBlock.PedestrianLight1 = FALSE  actual=%lf\n", (double)__GET_VAR(data__->TESTBLOCK.PEDESTRIANLIGHT1,));}
    #####:  530:      {printf("1,1: TestBlock.PedestrianLight2 = FALSE  actual=%lf\n", (double)__GET_VAR(data__->TESTBLOCK.PEDESTRIANLIGHT2,));}
    #####:  531:        IF NOT(TestBlock.NorthSouthRed = TRUE AND TestBlock.NorthSouthYellow = FALSE AND TestBlock.NorthSouthGreen = FALSE AND TestBlock.EastWestRed = FALSE AND TestBlock.EastWestYellow = TRUE AND TestBlock.EastWestGreen = FALSE AND TestBlock.PedestrianLight1 = FALSE AND TestBlock.PedestrianLight2 = FALSE) THEN Failed := TRUE; END_IF;
    #####:  532:      END_IF;
    #####:  533:      Finished:=TRUE;
        -:  534:  END_CASE;
        -:  535:END_FUNCTION_BLOCK
        -:  536:
        3:  537:
        -:  538:PROGRAM TestRunnerProgram
        3:  539:VAR
        3:  540:  testResult AT %QX0.0 : BOOL := FALSE;
        -:  541:END_VAR
        -:  542:VAR
        -:  543:  totalTests AT %QW0 : INT := 0;
        -:  544:  passedTests AT %QW1 : INT := 0;
        -:  545:END_VAR
        -:  546:VAR
        1:  547:  i: INT := 0;
       1*:  548:  testOutcomeArray : ARRAY [0..1] OF BOOL;
        1:  549:  Test_0: FB_TEST_0;
       1*:  550:  Test_1: FB_TEST_1;
        1:  551:END_VAR
       1*:  552:
       4*:  553:  IF NOT Test_0.Finished AND NOT Test_0.FAILED THEN totalTests := totalTests + 1; Test_0(); END_IF;
      11*:  554:  IF Test_0.Finished THEN testOutcomeArray[0] := TRUE; END_IF;
      10*:  555:  IF NOT Test_1.Finished AND NOT Test_1.FAILED THEN totalTests := totalTests + 1; Test_1(); END_IF;
      10*:  556:  IF Test_1.Finished THEN testOutcomeArray[1] := TRUE; END_IF;
        1:  557:
       10:  558:  passedTests := 0;
        1:  559:  FOR i:=0 TO 1 DO
      31*:  560:    IF testOutcomeArray[i]=TRUE THEN passedTests := passedTests+1; END_IF;
       30:  561:  END_FOR;
        -:  562:END_PROGRAM
       20:  563:
       10:  564:
        -:  565:
       10:  566:CONFIGURATION Config0
        -:  567:
       10:  568:  RESOURCE Res0 ON PLC
       10:  569:    TASK task0(INTERVAL := T#100ms,PRIORITY := 0);
        -:  570:    PROGRAM instance0 WITH task0 : TestRunnerProgram;
        -:  571:  END_RESOURCE
        -:  572:END_CONFIGURATION
        -:  573:
        -:  574:
